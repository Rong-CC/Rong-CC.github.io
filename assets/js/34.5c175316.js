(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{420:function(t,n,s){"use strict";s.r(n);var e=s(54),a=Object(e.a)({},(function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 执行命令将 main.go 加入不提交队列")]),t._v("\ngit update-index --assume-unchanged main.go\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 执行命令将 main.go 取消加入不提交队列")]),t._v("\ngit update-index --no-assume-unchanged main.go\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  执行存储时")]),t._v("\ngit stash   \n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 命令恢复之前缓存的工作目录")]),t._v("\ngit stash pop \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 查看stash了哪些存储")]),t._v("\ngit stash list  \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#创建分支")]),t._v("\ngit checkout -b  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v(" \n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##通过命令可以撤销文件在工作区的修改。")]),t._v("\ngit checkout -- 文件名 \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 通过 命令可以撤销指定文件的 git add 操作，即这个文件在暂存区的修改。")]),t._v("\ngit reset 文件名 \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##通过 命令可以撤销之前的所有 git add 操作，即在暂存区的修改。")]),t._v("\ngit reset \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git删除远程分支")]),t._v("\ngit push origin --delete [branch_name]\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看分支情况")]),t._v("\ngit branch -a\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 删除本地分支")]),t._v("\ngit branch -D dev\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#查看提交记录")]),t._v("\ngit log  \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 拉取最新分支")]),t._v("\ngit fetch \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将当前分支合并到指定分支")]),t._v("\ngit merge "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xxx'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#将当前分支移植到指定分支或指定commit之上")]),t._v("\ngit rebase\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 本地分支 创建远程分支")]),t._v("\ngit push --set-upstream origin v1.3.0\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 变基")]),t._v("\ngit  rebase  --continue \ngit rebase --continue 合并冲突，结合"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add 文件"')]),t._v("命令一起用与修复冲突，提示开发者，一步一步地有没有解决冲突\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 会放弃合并，回到rebase操作之前的状态，之前的提交的不会丢弃；")]),t._v("\ngit rebase --abort \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 则会将引起冲突的commits丢弃掉（慎用！！）")]),t._v("\ngit rebase --skip \n\n\n\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 命令的作用，就是将指定的提交（commit）应用于其他分支。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git cherry-pick <commitHash>")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#回退方式一命令：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 回退上个一个版本 （HEAD^上个版本。 回退其他版本架版本号）")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git reset"),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" --hard")]),t._v(" HEAD^         回退到上个版本")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git reset"),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" --hard")]),t._v(" HEAD~3        回退到前3次提交之前，以此类推，回退到n次提交之前")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git reset"),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" --hard")]),t._v(" commit_id     退到/进到 指定commit的sha码")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 强推到远程")]),t._v("\ngit push origin HEAD --force\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#回退方式二")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1、找到你误提交之前的版本号")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2、git revert -n 版本号")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 3、git commit -m xxxx 提交")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 4、git push 推送到远程")]),t._v("\n\n\n\ngit push origin test:test    #提交本地test分支作为远程的test分支\n\ngit branch --set-upstream-to=origin/test test  #将本地分支与远程分支关联\n\n\n")])])])])}),[],!1,null,null,null);n.default=a.exports}}]);