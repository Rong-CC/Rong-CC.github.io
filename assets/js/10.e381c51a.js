(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{395:function(t,e,v){"use strict";v.r(e);var _=v(54),a=Object(_.a)({},(function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h3",{attrs:{id:"vue-js-是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue-js-是什么"}},[t._v("#")]),t._v(" vue.JS 是什么")]),t._v(" "),v("p",[t._v("​\tvue.js是一个轻巧、高性能、可组件化的MVVM模式的框架")]),t._v(" "),v("p",[t._v("​\tvue.js是一套用于构建用户界面的渐进式架构、它是以数据驱动和组件化的思想构建的，采用自底向上增量开发的设计。")]),t._v(" "),v("h3",{attrs:{id:"什么是mvvm框架"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是mvvm框架"}},[t._v("#")]),t._v(" 什么是MVVM框架")]),t._v(" "),v("p",[t._v("MVVM用视图模型代替了MVP中的展示器，视图模型和视图实现了双向绑定，当视图发生变化的时候视图模型也会发生改变，当视图模型变化的时候视图也随之变化。")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("Model : 数据模型，数据和业务逻辑都在mode层中定义")])]),t._v(" "),v("li",[v("p",[t._v("View : UI界面")])]),t._v(" "),v("li",[v("p",[t._v("ViewModal： 负责监听Model中数据的改变并且控制视图的更新，处理用户交互操作")]),t._v(" "),v("h3",{attrs:{id:"vue-生命周期"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#vue-生命周期"}},[t._v("#")]),t._v(" vue 生命周期")]),t._v(" "),v("p",[t._v("每个vue实例在被创建之前都要经过一系列的初始化过程，这个过程就是生命周期")]),t._v(" "),v("p",[t._v("vue官网的是一张生命周期详解图")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/6/8/16b371d739d6f702?imageslim",alt:"img"}})]),t._v(" "),v("p",[t._v("​")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("Vue2.0")]),t._v(" "),v("th",{staticStyle:{"text-align":"center"}},[t._v("Description")]),t._v(" "),v("th")])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("beforeCreate")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("发生在组件实例化之后、数据观测 (data observer) 和 event/watcher 事件配置之前。组件一些属性都获取不到、props、data、methods中的值")]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[t._v("created")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("实例创建完成，数据初始化完成(props，data、methods初始化能访问)， 注入依赖完成配置：数据观测 (data observer)、计算属性、方法、watch/event 事件回调。此时数据是响应式，不能访问 DOM。")]),t._v(" "),v("td",[t._v("用于ajax请求")])]),t._v(" "),v("tr",[v("td",[t._v("beforeMount")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("发生在 DOM 挂载之前。此时模板或渲染函数已经编译好，相关的 render 函数首次被调用，不能访问 DOM。")]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[t._v("mounted")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("实例挂载到dom上之后，能访问DOM")]),t._v(" "),v("td",[t._v("用于ajax请求，dom 的操作")])]),t._v(" "),v("tr",[v("td",[t._v("beforeupdate")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("响应式数据更新调用，打算在虚拟dom 重新渲染和打补丁之前，可以在该钩子中进一步地更改状态，不会触发附加的重渲染过程")]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[t._v("updated")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("在由于数据更改导致的虚拟DOM重新渲染和打补丁之后调用。调用时，组件DOM已经更新，所以可以执行依赖于DOM的操作。然而在大多数情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用")]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[t._v("beforeDestroy")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("实例销毁之前调用，用于清除定时器操作")]),t._v(" "),v("td")]),t._v(" "),v("tr",[v("td",[t._v("destroyed")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("实例销毁之后调用，所有的事情监听器会被移除，所有子实例也会被销毁")]),t._v(" "),v("td")])])])])])])}),[],!1,null,null,null);e.default=a.exports}}]);