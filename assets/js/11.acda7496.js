(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{397:function(e,t,v){"use strict";v.r(t);var _=v(54),r=Object(_.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("p",[v("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/12/26/16f409e706ab9fb9?imageslim",alt:""}})]),e._v(" "),v("h3",{attrs:{id:"响应式原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#响应式原理"}},[e._v("#")]),e._v(" 响应式原理")]),e._v(" "),v("p",[e._v("在 Vue 中，数据模型下的所有属性，会被 Vue 使用"),v("code",[e._v("Object.defineProperty")]),e._v("（Vue3.0 使用 Proxy）进行数据劫持代理。响应式的核心机制是观察者模式，数据是被观察的一方，一旦发生变化，通知所有观察者，这样观察者可以做出响应，比如当观察者为视图时，视图可以做出视图的更新。")]),e._v(" "),v("p",[e._v("核心：**")]),e._v(" "),v("p",[e._v("​\t"),v("strong",[e._v("Observer")]),e._v(" ：使用"),v("code",[e._v("Object.defineProperty")]),e._v("方法对对象的属性进行数据劫持/监听，为每一个属性添加getter，setter让属性变成响应式。")]),e._v(" "),v("p",[e._v("​\t"),v("strong",[e._v("Dep（订阅者）")]),e._v("：用于收集当前响应式对象的依赖关系,每个响应式对象包括子对象都拥有一个 Dep 实例")]),e._v(" "),v("ol",[v("li",[v("p",[e._v("用 "),v("code",[e._v("addSub")]),e._v(" 方法可以在目前的 "),v("code",[e._v("Dep")]),e._v(" 对象中增加一个 "),v("code",[e._v("Watcher")]),e._v(" 的订阅操作；")])]),e._v(" "),v("li",[v("p",[e._v("用 "),v("code",[e._v("notify")]),e._v(" 方法通知目前 "),v("code",[e._v("Dep")]),e._v(" 对象的 "),v("code",[e._v("subs")]),e._v(" 中的所有 "),v("code",[e._v("Watcher")]),e._v(" 对象触发更新操作。")]),e._v(" "),v("p",[v("strong",[e._v("Watcher（观察者）")]),e._v("： Watcher 扮演的角色是订阅者/观察者，他的主要作用是为观察属性提供回调函数以及收集依赖，当被观察的值发生变化时，会接收到来自调度中心"),v("code",[e._v("Dep")]),e._v("的通知，从而触发回调函数。")])])]),e._v(" "),v("h4",{attrs:{id:"watcher-和-dep-的关系"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#watcher-和-dep-的关系"}},[e._v("#")]),e._v(" Watcher 和 Dep 的关系")]),e._v(" "),v("p",[e._v("watcher 中实例化了 dep 并向 dep.subs 中添加了订阅者,dep 通过 notify 遍历了 dep.subs 通知每个 watcher 更新。")]),e._v(" "),v("h3",{attrs:{id:"派发更新"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#派发更新"}},[e._v("#")]),e._v(" 派发更新")]),e._v(" "),v("ol",[v("li",[e._v("组件中对响应的数据进行了修改,触发 setter 的逻辑")]),e._v(" "),v("li",[e._v("调用 dep.notify()")]),e._v(" "),v("li",[e._v("遍历所有的 subs（Watcher 实例）,调用每一个 watcher 的 update 方法。")])])])}),[],!1,null,null,null);t.default=r.exports}}]);